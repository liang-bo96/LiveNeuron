name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install package with dev dependencies
        pip install -e ".[dev]"

    - name: Test package installation
      run: |
        # Test that the package can be imported after installation
        python -c "from eelbrain_plotly_viz import EelbrainPlotly2DViz, BrainPlotly2DViz, create_sample_brain_data; print('Package imports successful!')"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/

    - name: Run fast tests (Linux)
      if: runner.os == 'Linux'
      run: |
        # Use xvfb for headless testing on Linux, skip slow tests for CI speed
        xvfb-run -a pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing -m "not slow" --durations=10

    - name: Run fast tests (Windows/macOS)
      if: runner.os != 'Linux'
      run: |
        # Skip slow tests for CI speed
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing -m "not slow" --durations=10

    - name: Run slow tests (Ubuntu Python 3.10 only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      run: |
        # Run slow tests only on one configuration to save CI time
        xvfb-run -a pytest tests/ -v -m "slow" --durations=10

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-notebooks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest nbval jupyter
        pip install -e .

    - name: Test notebooks
      run: |
        # Test example notebook if it exists
        if [ -f "example.py" ]; then
          python example.py
        fi
        # Add notebook testing when available
        # pytest --nbval notebooks/